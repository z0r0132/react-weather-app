{"version":3,"sources":["serviceWorker.js","components/TemperatureToggle/index.jsx","components/TemperatureToggle/styles.js","theme.js","utils/helpers/index.js","components/WeatherForecastCard/index.jsx","components/WeatherForecastCard/styles.js","components/WeatherForecastCarousel/index.jsx","components/WeatherForecastCarousel/styles.js","components/WeatherCardList/index.jsx","components/WeatherCardList/styles.js","components/WeatherSegmentsBarChart/index.jsx","components/WeatherSegmentsBarChart/styles.js","utils/api.js","utils/config.js","selectors/index.js","hooks/useWeatherForecast.js","actions/weatherForecast.js","constants/weatherForecast.js","containers/WeatherCardListContainer/index.jsx","containers/Home/index.jsx","layouts/MainLayout.js","App.js","store/reducers/weatherForecastReducer.js","store/reducers/index.js","store/index.js","index.js"],"names":["Boolean","window","location","hostname","match","useStyles","makeStyles","theme","root","display","flexDirection","TemperatureToggle","units","onToggleUnits","classes","handleChange","useCallback","event","target","value","RadioGroup","className","name","onChange","FormControlLabel","control","Radio","label","createMuiTheme","palette","type","background","light","dark","common","white","black","primary","indigo","secondary","lightBlue","error","red","contrastThreshold","typography","fontFamily","months","convertTemperature","temp","Math","round","formatDate","dt","d","Date","getDate","getMonth","getFullYear","toString","slice","card","borderRadius","boxShadow","color","cursor","minWidth","position","border","id","activeDate","content","width","height","bottom","zIndex","h2","fontWeight","h5","textTransform","WeatherForecastCard","forecast","date","onDateChange","dt_txt","main","temperature","useMemo","formatTemp","handleClick","Card","onClick","CardMedia","media","component","alt","image","title","CardContent","Typography","gutterBottom","variant","carousel","margin","arrow","top","alignItems","left","justifyContent","currentSlide","right","slidesToShow","slideCount","slider","padding","spacing","NextArrow","props","classNames","ArrowForward","fontSize","PrevArrow","ArrowBack","WeatherForecastCarousel","carouselClass","weatherInfo","data","matchMedia","matches","settings","swipeToSlide","nextArrow","prevArrow","responsive","breakpoint","list","length","Object","entries","map","key","marginBottom","paddingTop","WeatherCardList","defaultProps","breakpoints","down","WeatherSegmentsBarChart","chartData","labels","forEach","time","split","push","datasets","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","convertDataForChart","options","maintainAspectRatio","callAPI","url","fetch","then","response","status","Error","json","responseJSON","fetchWeatherForecast","openWeatherUrl","weatherForecastStateSelector","state","weatherForecast","getWeatherInfoSelector","reduce","acc","groupWeatherDataByDate","getChartDataSelector","keys","useWeatherForecast","dispatch","useDispatch","dispatchGetWeatherForecast","a","payload","dispatchToggleUnits","toggleUnitsAction","dispatchDateChange","dateChange","useSelector","action","isLoading","WeatherCardListContainer","useEffect","Home","style","flexGrow","marginTop","MainLayout","children","App","CssBaseline","Component","connect","initialState","reducers","combineReducers","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.a5834f4c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport styles from \"./styles\";\n\nconst useStyles = makeStyles(styles);\n\nconst TemperatureToggle = ({ units, onToggleUnits }) => {\n  const classes = useStyles();\n\n  const handleChange = useCallback(\n    (event) => {\n      onToggleUnits(event.target.value);\n    },\n    [onToggleUnits]\n  );\n\n  return (\n    <div>\n      <RadioGroup\n        className={classes.root}\n        name=\"units\"\n        value={units}\n        onChange={handleChange}\n      >\n        <FormControlLabel value=\"celsius\" control={<Radio />} label=\"Celsius\" />\n        <FormControlLabel\n          value=\"fahrenheit\"\n          control={<Radio />}\n          label=\"Fahrenheit\"\n        />\n      </RadioGroup>\n    </div>\n  );\n};\n\nTemperatureToggle.propTypes = {\n  units: PropTypes.string,\n  onToggleUnits: PropTypes.func,\n};\n\nexport default TemperatureToggle;\n","export default (theme) => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"row\",\n  },\n});\n","import { indigo, red, lightBlue } from \"@material-ui/core/colors\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nconst white = \"#FFF\";\nconst black = \"#000\";\n\nexport default createMuiTheme({\n  palette: {\n    type: \"dark\",\n    background: {\n      light: \"#86B9E0\",\n      dark: \"rgb(26, 26, 26)\",\n    },\n    common: {\n      white,\n      black,\n    },\n    primary: indigo,\n    secondary: lightBlue,\n    error: red,\n    contrastThreshold: 3,\n  },\n  typography: {\n    fontFamily: \"Lato, sans-serif\",\n  },\n});\n","import theme from \"../../theme\";\n\nconst months = [\n  \"Jan\",\n  \"Feb\",\n  \"Mar\",\n  \"Apr\",\n  \"May\",\n  \"Jun\",\n  \"Jul\",\n  \"Aug\",\n  \"Sep\",\n  \"Oct\",\n  \"Nov\",\n  \"Dec\",\n];\n\n/**\n * This function accepts an temperature and units of weather data as an argument, and returns temperature(either in fahrenheit, or, celsius)\n * @param {number} temp\n * @param {string} units\n */\nconst convertTemperature = (temp, units) =>\n  Math.round(units === \"celsius\" ? (5 / 9) * (temp - 32) : temp);\n\n/**\n * This function accepts an array of weather data as an argument, and returns array of weather data grouped by date as a response\n * @param {array} list\n */\nexport const groupWeatherDataByDate = (list) => {\n  return list.reduce((acc, value) => {\n    const key = value[\"dt_txt\"].split(\" \")[0];\n    if (!acc[key]) {\n      acc[key] = [];\n    }\n\n    acc[key].push(value);\n\n    return acc;\n  }, {});\n};\n\n/**\n * This function accepts an temperature and units of weather data as an argument, and returns formatted temperature as a response\n * @param {number} temp\n * @param {string} units\n */\nexport const formatTemp = (temp, units) =>\n  `${convertTemperature(temp, units)}${units === \"celsius\" ? \"C\" : \"F\"}`;\n\n/**\n * This function accepts date of weather data as an argument, and returns formatted date as a response\n * @param {string} dt\n */\nexport const formatDate = (dt) => {\n  const d = new Date(dt);\n  return `${d.getDate()} ${\n    months[d.getMonth()]\n  } ${d.getFullYear().toString().slice(2)}`;\n};\n\n/**\n * This function accepts units and chartData viz. weather data for a particular date as an argument, and returns bar chart required dataset\n * @param {string} units\n * * @param {array} chartData\n */\nexport const convertDataForChart = (units, chartData = []) => {\n  if (chartData.length === 0) {\n    return {};\n  }\n  const labels = [],\n    data = [];\n  chartData.forEach(({ dt_txt: dt, main: { temp } }) => {\n    const time = dt.split(\" \")[1];\n    const temperature = convertTemperature(temp, units);\n    labels.push(time);\n    data.push(temperature);\n  });\n\n  return {\n    labels,\n    datasets: [\n      {\n        label: `Weather on ${formatDate(chartData[0].dt_txt)} (per 3 hours)`,\n        backgroundColor: theme.palette.background.light,\n        borderColor: theme.palette.background.dark,\n        borderWidth: 1,\n        hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\n        hoverBorderColor: \"rgba(255,99,132,1)\",\n        data,\n      },\n    ],\n  };\n};\n","import React, { useCallback, useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\n\nimport { formatTemp, formatDate } from \"../../utils/helpers\";\nimport styles from \"./styles\";\n\nconst useStyles = makeStyles(styles);\n\nconst WeatherForecastCard = ({\n  id,\n  forecast,\n  units,\n  date: activeDate,\n  onDateChange,\n}) => {\n  const classes = useStyles({\n    id: formatDate(id),\n    activeDate: formatDate(activeDate),\n  });\n\n  const {\n    dt_txt: dt,\n    main: { temp },\n  } = forecast;\n\n  const temperature = useMemo(() => formatTemp(temp, units), [temp, units]);\n  const date = useMemo(() => formatDate(dt), [dt]);\n\n  const handleClick = useCallback(() => {\n    onDateChange(id);\n  }, [id, onDateChange]);\n\n  return (\n    <Card className={classes.card} onClick={handleClick}>\n      <CardMedia\n        className={classes.media}\n        component=\"img\"\n        alt=\"cloudy sky\"\n        image=\"https://images.pexels.com/photos/531756/pexels-photo-531756.jpeg?cs=srgb&dl=pexels-pixabay-531756.jpg&fm=jpg\"\n        title=\"cloudy sky\"\n      />\n      <CardContent className={classes.content}>\n        <Typography\n          className={classes.h2}\n          gutterBottom\n          variant=\"h2\"\n          component=\"h2\"\n          color=\"inherit\"\n        >\n          {temperature}\n        </Typography>\n        <Typography\n          className={classes.h5}\n          gutterBottom\n          variant=\"h5\"\n          component=\"h2\"\n          color=\"inherit\"\n        >\n          {date}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n};\n\nWeatherForecastCard.propTypes = {\n  id: PropTypes.string,\n  forecast: PropTypes.object.isRequired,\n  units: PropTypes.string,\n  onDateChange: PropTypes.func,\n};\nexport default WeatherForecastCard;\n","export default (theme) => ({\n  card: {\n    borderRadius: \"1rem\",\n    boxShadow: \"none\",\n    color: theme.palette.common.white,\n    cursor: \"pointer\",\n    minWidth: 200,\n    position: \"relative\",\n    border: ({ id, activeDate }) => activeDate === id && \"2px solid\",\n    \"&:after\": {\n      content: '\"\"',\n      display: \"block\",\n      position: \"absolute\",\n      width: \"100%\",\n      height: \"64%\",\n      bottom: 0,\n      zIndex: 1,\n      background: \"linear-gradient(to top, #000, rgba(0,0,0,0))\",\n    },\n  },\n  content: {\n    position: \"absolute\",\n    zIndex: 2,\n    bottom: 0,\n    width: \"100%\",\n  },\n  h2: {\n    fontWeight: 400,\n  },\n  h5: {\n    textTransform: \"capitalize\",\n  },\n});\n","import React, { useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\nimport Slider from \"react-slick\";\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\n\nimport { ArrowBack, ArrowForward } from \"@material-ui/icons\";\nimport { makeStyles } from \"@material-ui/core\";\n\nimport WeatherForecastCard from \"../WeatherForecastCard\";\n\nimport styles from \"./styles\";\n\nconst useStyles = makeStyles(styles);\n\nexport const NextArrow = (props) => {\n  const { slidesToShow, currentSlide, slideCount, onClick } = props;\n  const classes = useStyles({ slidesToShow, currentSlide, slideCount });\n  return (\n    <div className={classNames(classes.arrow, \"nextArrow\")} onClick={onClick}>\n      <ArrowForward color=\"inherit\" fontSize=\"large\" />\n    </div>\n  );\n};\n\nexport const PrevArrow = (props) => {\n  const { currentSlide, onClick } = props;\n  const classes = useStyles({ currentSlide });\n  return (\n    <div className={classNames(classes.arrow, \"prevArrow\")} onClick={onClick}>\n      <ArrowBack color=\"inherit\" fontSize=\"large\" />\n    </div>\n  );\n};\n\nconst WeatherForecastCarousel = ({\n  carouselClass,\n  units,\n  date,\n  weatherInfo,\n  data,\n  onDateChange,\n}) => {\n  const classes = useStyles();\n\n  const slidesToShow = useMemo(\n    () => (window.matchMedia(\"(max-width: 750px)\").matches ? 1 : 3),\n    []\n  );\n\n  const settings = {\n    slidesToShow,\n    swipeToSlide: true,\n    nextArrow: <NextArrow slidesToShow={slidesToShow} />,\n    prevArrow: <PrevArrow />,\n    responsive: [\n      {\n        breakpoint: 750,\n        settings: {\n          slidesToShow,\n        },\n      },\n    ],\n  };\n\n  if (!data?.list?.length) return null;\n\n  return (\n    <div className={carouselClass}>\n      <Slider {...settings} className={classes.slider}>\n        {Object.entries(weatherInfo).map(([key, value]) => (\n          <WeatherForecastCard\n            key={key}\n            id={key}\n            date={date}\n            forecast={value[0]}\n            units={units}\n            onDateChange={onDateChange}\n          />\n        ))}\n      </Slider>\n    </div>\n  );\n};\n\nWeatherForecastCarousel.propTypes = {\n  carouselClass: PropTypes.string,\n  data: PropTypes.object,\n  units: PropTypes.string,\n  date: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date)]),\n  weatherInfo: PropTypes.object.isRequired,\n  onDateChange: PropTypes.func,\n};\n\nexport default WeatherForecastCarousel;\n","export default (theme) => ({\n  carousel: {\n    width: \"85%\",\n    height: \"100%\",\n    margin: \"auto\",\n  },\n  arrow: {\n    cursor: \"pointer\",\n    position: \"absolute\",\n    top: \"-75px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    color: theme.palette.common.white,\n    zIndex: 1,\n    \"&.prevArrow\": {\n      left: 0,\n      justifyContent: \"flex-start\",\n      display: ({ currentSlide }) => (currentSlide ? \"block\" : \"none\"),\n    },\n    \"&.nextArrow\": {\n      right: 0,\n      justifyContent: \"flex-end\",\n      display: ({ slidesToShow, currentSlide, slideCount }) =>\n        currentSlide + slidesToShow === slideCount ? \"none\" : \"block\",\n    },\n  },\n  slider: {\n    \"& .slick-list\": { width: \"90vw\" },\n    \"& .slick-slide\": { padding: theme.spacing(1) },\n  },\n});\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from \"@material-ui/core\";\n\nimport WeatherForecastCarousel from \"../WeatherForecastCarousel\";\n\nimport styles from \"./styles\";\n\nconst useStyles = makeStyles(styles);\n\nconst WeatherCardList = (props) => {\n  const { units, date, weatherInfo, data, onDateChange } = props;\n\n  const classes = useStyles();\n\n  return (\n    <WeatherForecastCarousel\n      carouselClass={classes.carousel}\n      units={units}\n      date={date}\n      weatherInfo={weatherInfo}\n      data={data}\n      onDateChange={onDateChange}\n    />\n  );\n};\n\nWeatherCardList.defaultProps = {\n  weatherInfo: {},\n};\n\nWeatherCardList.propTypes = {\n  units: PropTypes.string,\n  date: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date)]),\n  weatherInfo: PropTypes.object.isRequired,\n};\n\nexport default WeatherCardList;\n","export default (theme) => ({\n  carousel: {\n    marginBottom: theme.spacing(6),\n    paddingTop: theme.spacing(12),\n  },\n});\n","import React, { useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Bar } from \"react-chartjs-2\";\n\nimport { makeStyles } from \"@material-ui/core\";\n\nimport { convertDataForChart } from \"../../utils/helpers\";\n\nimport styles from \"./styles\";\n\nconst useStyles = makeStyles(styles);\n\nconst WeatherSegmentsBarChart = ({ units, chartData }) => {\n  const classes = useStyles();\n\n  const data = useMemo(() => convertDataForChart(units, chartData), [\n    chartData,\n    units,\n  ]);\n\n  return (\n    <div className={classes.root}>\n      <Bar\n        data={data}\n        width={100}\n        height={50}\n        options={{\n          maintainAspectRatio: false,\n        }}\n      />\n    </div>\n  );\n};\n\nWeatherSegmentsBarChart.propTypes = {\n  units: PropTypes.string,\n  chartData: PropTypes.array,\n};\n\nexport default WeatherSegmentsBarChart;\n","export default (theme) => ({\n  root: {\n    paddingTop: theme.spacing(2),\n    position: \"relative\",\n    width: \"75%\",\n    height: \"300px\",\n    background: theme.palette.common.white,\n  },\n  [theme.breakpoints.down(\"sm\")]: {\n    root: {\n      width: \"100%\",\n    },\n  },\n});\n","import { OPENWEATHERAPIKEY } from \"./config\";\n\n/**\n * This function accepts an url and options of a API as an argument, and returns data response\n * @param {string} url\n * @param {object} options\n */\nconst callAPI = (url, options = {}) =>\n  fetch(url)\n    .then((response) => {\n      if (response.status !== 200) {\n        throw new Error(\"unexpected response\");\n      }\n\n      return response.json();\n    })\n    .then((responseJSON) => responseJSON);\n\n/**\n * This function accepts an location(e.g city), and returns data response\n * @param {string} location\n */\nexport const fetchWeatherForecast = (location = \"Munich,de\") => {\n  const openWeatherUrl = `https://api.openweathermap.org/data/2.5/forecast?q=${location}&APPID=${OPENWEATHERAPIKEY}&units=imperial&cnt=40`;\n  return callAPI(openWeatherUrl);\n};\n","export const OPENWEATHERAPIKEY = \"75f972b80e26f14fe6c920aa6a85ad57\";\n","import { groupWeatherDataByDate } from \"../utils/helpers\";\n\nexport const weatherForecastStateSelector = (state) => state.weatherForecast;\n\nexport const getWeatherInfoSelector = (state) => {\n  const {\n    data: { list = [] },\n  } = weatherForecastStateSelector(state);\n  return groupWeatherDataByDate(list);\n};\n\nexport const getChartDataSelector = (state) => {\n  const { date } = weatherForecastStateSelector(state);\n  const weatherInfo = getWeatherInfoSelector(state);\n  return weatherInfo[date] || weatherInfo[Object.keys(weatherInfo)[0]];\n};\n","import { useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport {\n  getWeatherForecastAction,\n  toggleUnitsAction,\n  dateChange,\n} from \"../actions/weatherForecast\";\nimport { GET_WEATHER_FORECAST_START } from \"../constants/weatherForecast\";\nimport {\n  weatherForecastStateSelector,\n  getWeatherInfoSelector,\n  getChartDataSelector,\n} from \"../selectors\";\n\nexport const useWeatherForecast = () => {\n  const dispatch = useDispatch();\n\n  const dispatchGetWeatherForecast = useCallback(() => {\n    dispatch(getWeatherForecastAction());\n  }, [dispatch]);\n\n  const dispatchToggleUnits = useCallback(\n    (units) => {\n      dispatch(toggleUnitsAction(units));\n    },\n    [dispatch]\n  );\n\n  const dispatchDateChange = useCallback(\n    (date) => {\n      dispatch(dateChange(date));\n    },\n    [dispatch]\n  );\n\n  const { date, units, action, error, data } = useSelector(\n    weatherForecastStateSelector\n  );\n  const weatherInfo = useSelector(getWeatherInfoSelector);\n  const chartData = useSelector(getChartDataSelector);\n\n  const isLoading = GET_WEATHER_FORECAST_START === action;\n\n  return {\n    dispatchGetWeatherForecast,\n    dispatchToggleUnits,\n    dispatchDateChange,\n    date,\n    units,\n    chartData,\n    weatherInfo,\n    data,\n    action,\n    error,\n    isLoading,\n  };\n};\n","import {\n  GET_WEATHER_FORECAST_START,\n  GET_WEATHER_FORECAST_SUCCESS,\n  GET_WEATHER_FORECAST_ERROR,\n  TOGGLE_TEMP_UNITS,\n  DATE_CHANGE,\n} from \"../constants/weatherForecast\";\n\nimport { fetchWeatherForecast } from \"../utils/api\";\n\nexport const getWeatherForecastsRequest = () => ({\n  type: GET_WEATHER_FORECAST_START,\n});\n\nexport const getWeatherForecastSuccess = (weatherForecast) => ({\n  type: GET_WEATHER_FORECAST_SUCCESS,\n  payload: weatherForecast,\n});\n\nexport const getWeatherForecastError = (error) => ({\n  type: GET_WEATHER_FORECAST_ERROR,\n  payload: error,\n});\n\nexport const getWeatherForecastAction = () => async (dispatch) => {\n  try {\n    dispatch(getWeatherForecastsRequest());\n    const data = await fetchWeatherForecast();\n    dispatch(getWeatherForecastSuccess({ data }));\n  } catch (error) {\n    dispatch(getWeatherForecastError({ error }));\n  }\n};\n\nexport const toggleUnitsAction = (units) => ({\n  type: TOGGLE_TEMP_UNITS,\n  payload: units,\n});\n\nexport const dateChange = (date) => ({\n  type: DATE_CHANGE,\n  payload: date,\n});\n","export const GET_WEATHER_FORECAST_START = \"GET_WEATHER_FORECAST_START\";\nexport const GET_WEATHER_FORECAST_SUCCESS = \"GET_WEATHER_FORECAST_SUCCESS\";\nexport const GET_WEATHER_FORECAST_ERROR = \"GET_WEATHER_FORECAST_ERROR\";\nexport const TOGGLE_TEMP_UNITS = \"TOGGLE_TEMP_UNITS\";\nexport const DATE_CHANGE = \"DATE_CHANGE\";\n","import React, { useEffect } from \"react\";\n\nimport TemperatureToggle from \"../../components/TemperatureToggle\";\nimport WeatherCardList from \"../../components/WeatherCardList\";\nimport WeatherSegmentsBarChart from \"../../components/WeatherSegmentsBarChart\";\n\nimport { useWeatherForecast } from \"../../hooks/useWeatherForecast\";\n\nconst WeatherCardListContainer = () => {\n  const {\n    units,\n    date,\n    chartData,\n    weatherInfo,\n    data,\n    isLoading,\n    dispatchGetWeatherForecast,\n    dispatchToggleUnits,\n    dispatchDateChange,\n  } = useWeatherForecast();\n\n  useEffect(() => {\n    dispatchGetWeatherForecast();\n  }, [dispatchGetWeatherForecast]);\n\n  if (isLoading) return <div>Loading...</div>;\n\n  return (\n    <>\n      <TemperatureToggle units={units} onToggleUnits={dispatchToggleUnits} />\n      <WeatherCardList\n        units={units}\n        date={date}\n        weatherInfo={weatherInfo}\n        data={data}\n        isLoading={isLoading}\n        onDateChange={dispatchDateChange}\n      />\n      <WeatherSegmentsBarChart units={units} chartData={chartData} />\n    </>\n  );\n};\n\nexport default WeatherCardListContainer;\n","import React from \"react\";\n\nimport WeatherCardListContainer from \"../WeatherCardListContainer\";\n\nconst Home = () => {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        height: \"100%\",\n      }}\n    >\n      <WeatherCardListContainer />\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst styles = (theme) => ({\n  root: {\n    display: \"flex\",\n    backgroundColor: theme.palette.background.dark,\n    color: theme.palette.common.white,\n    height: \"100%\",\n  },\n  content: {\n    flexGrow: 1,\n    marginTop: theme.spacing(7),\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nconst MainLayout = ({ children }) => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <main className={classNames(classes.content)}>{children}</main>\n    </div>\n  );\n};\n\nexport default MainLayout;\n","import React, { Component } from \"react\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { MuiThemeProvider } from \"@material-ui/core/styles\";\nimport { connect } from \"react-redux\";\n\nimport Home from \"./containers/Home\";\n\nimport MainLayout from \"./layouts/MainLayout\";\n\nimport theme from \"./theme\";\n\nclass App extends Component {\n  render() {\n    return (\n      <MuiThemeProvider theme={theme}>\n        <CssBaseline />\n        <div style={{ height: \"100vh\" }}>\n          <MainLayout>\n            <Home />\n          </MainLayout>\n        </div>\n      </MuiThemeProvider>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {};\n};\n\nexport default connect(mapStateToProps, null)(App);\n","import {\n  GET_WEATHER_FORECAST_START,\n  GET_WEATHER_FORECAST_SUCCESS,\n  GET_WEATHER_FORECAST_ERROR,\n  TOGGLE_TEMP_UNITS,\n  DATE_CHANGE,\n} from \"../../constants/weatherForecast\";\n\nexport const initialState = {\n  date: new Date(),\n  units: \"fahrenheit\",\n  action: \"\",\n  error: null,\n  data: { list: [] },\n};\n\nexport default function weatherForecastReducer(state = initialState, action) {\n  switch (action.type) {\n    case GET_WEATHER_FORECAST_START:\n      return {\n        ...state,\n        action: action.type,\n      };\n    case GET_WEATHER_FORECAST_SUCCESS:\n      return {\n        ...state,\n        action: action.type,\n        data: action.payload.data,\n      };\n    case GET_WEATHER_FORECAST_ERROR:\n      return {\n        ...state,\n        action: action.type,\n        error: action.payload.error,\n      };\n    case TOGGLE_TEMP_UNITS:\n      return {\n        ...state,\n        action: action.type,\n        units: action.payload,\n      };\n    case DATE_CHANGE:\n      return {\n        ...state,\n        action: action.type,\n        date: action.payload,\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\n\nimport weatherForecastReducer from \"./weatherForecastReducer\";\n\nconst reducers = combineReducers({\n  weatherForecast: weatherForecastReducer,\n});\n\nexport default reducers;\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\n\nimport rootReducer from \"./reducers\";\n\nexport default createStore(rootReducer, applyMiddleware(thunk));\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport App from \"./App\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}